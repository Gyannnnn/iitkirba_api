generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id       Int        @id @default(autoincrement())
  name          String
  email         String     @unique
  password      String
  branch        Branch?
  semester      String?
  saved_post    SavedPost?
  role          Role       @default(USER)
}

model SavedPost {
  id        Int   @id @default(autoincrement())
  userId    Int   @unique
  user      User  @relation(fields: [userId], references: [user_id], onDelete: Cascade)
}

model Branch {
  branch_id   Int         @id @default(autoincrement())
  userid      Int?        @unique
  user        User?       @relation(fields: [userid], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  semesters   Semester[]
}

model Semester {
  semester_id Int         @id @default(autoincrement())
  branchId    Int
  branch      Branch      @relation(fields: [branchId], references: [branch_id], onDelete: Cascade, onUpdate: Cascade)
  subjects    Subject[]
}

model Subject {
  subject_id  Int         @id @default(autoincrement())
  semesterId  Int
  semester    Semester    @relation(fields: [semesterId], references: [semester_id], onDelete: Cascade, onUpdate: Cascade)
  pyqs        Pyq[]
  notes       Notes[]
}

model Pyq {
  pyq_id      Int         @id @default(autoincrement())
  subjectId   Int
  subject     Subject     @relation(fields: [subjectId], references: [subject_id], onDelete: Cascade, onUpdate: Cascade)
}

model Notes {
  notes_id    Int         @id @default(autoincrement())
  subjectId   Int
  subject     Subject     @relation(fields: [subjectId], references: [subject_id], onDelete: Cascade, onUpdate: Cascade)
}


enum Role{
  USER
  ADMIN
}